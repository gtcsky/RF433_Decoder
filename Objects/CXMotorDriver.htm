<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\CXMotorDriver.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\CXMotorDriver.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Tue Aug 20 16:50:18 2019
<BR><P>
<H3>Maximum Stack Usage =        156 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; fucnPer5ms &rArr; fucnPer1s &rArr; getSignalChlADC &rArr; ADC_SignalMode_Config &rArr; ADCPinAFSet &rArr; GPIO_PinAFConfig
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1e]">ADC0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">ADC0_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1e]">ADC0_IRQHandler</a> from startup_cx32l003.o(.text) referenced from startup_cx32l003.o(RESET)
 <LI><a href="#[1a]">ADVTIM_IRQHandler</a> from user_advtime.o(.text) referenced from startup_cx32l003.o(RESET)
 <LI><a href="#[21]">AWK_IRQHandler</a> from user_awk.o(.text) referenced from startup_cx32l003.o(RESET)
 <LI><a href="#[24]">CLKTRIM_IRQHandler</a> from startup_cx32l003.o(.text) referenced from startup_cx32l003.o(RESET)
 <LI><a href="#[b]">GPIOA_IRQHandler</a> from user_exti.o(.text) referenced from startup_cx32l003.o(RESET)
 <LI><a href="#[c]">GPIOB_IRQHandler</a> from user_exti.o(.text) referenced from startup_cx32l003.o(RESET)
 <LI><a href="#[d]">GPIOC_IRQHandler</a> from user_exti.o(.text) referenced from startup_cx32l003.o(RESET)
 <LI><a href="#[e]">GPIOD_IRQHandler</a> from user_exti.o(.text) referenced from startup_cx32l003.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from cx32l003_it.o(.text) referenced from startup_cx32l003.o(RESET)
 <LI><a href="#[14]">I2C0_IRQHandler</a> from startup_cx32l003.o(.text) referenced from startup_cx32l003.o(RESET)
 <LI><a href="#[15]">I2C_DUMMY_IRQHandler</a> from startup_cx32l003.o(.text) referenced from startup_cx32l003.o(RESET)
 <LI><a href="#[1d]">IWDT_IRQHandler</a> from startup_cx32l003.o(.text) referenced from startup_cx32l003.o(RESET)
 <LI><a href="#[18]">LPTIMER_IRQHandler</a> from user_lptimer.o(.text) referenced from startup_cx32l003.o(RESET)
 <LI><a href="#[11]">LPUART_IRQHandler</a> from startup_cx32l003.o(.text) referenced from startup_cx32l003.o(RESET)
 <LI><a href="#[1f]">LVD_IRQHandler</a> from startup_cx32l003.o(.text) referenced from startup_cx32l003.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from cx32l003_it.o(.text) referenced from startup_cx32l003.o(RESET)
 <LI><a href="#[22]">ONEWIRE_IRQHandler</a> from startup_cx32l003.o(.text) referenced from startup_cx32l003.o(RESET)
 <LI><a href="#[1b]">PCA_IRQHandler</a> from startup_cx32l003.o(.text) referenced from startup_cx32l003.o(RESET)
 <LI><a href="#[19]">PWM_IRQHandler</a> from startup_cx32l003.o(.text) referenced from startup_cx32l003.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from cx32l003_it.o(.text) referenced from startup_cx32l003.o(RESET)
 <LI><a href="#[23]">RTC_MATCH0_IRQHandler</a> from user_rtc.o(.text) referenced from startup_cx32l003.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_cx32l003.o(.text) referenced from startup_cx32l003.o(RESET)
 <LI><a href="#[12]">SPI0COMB_IRQHandler</a> from startup_cx32l003.o(.text) referenced from startup_cx32l003.o(RESET)
 <LI><a href="#[13]">SPI_DUMMYCOMB_IRQHandler</a> from startup_cx32l003.o(.text) referenced from startup_cx32l003.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from cx32l003_it.o(.text) referenced from startup_cx32l003.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from cx32l003_it.o(.text) referenced from startup_cx32l003.o(RESET)
 <LI><a href="#[16]">TIMER10_IRQHandler</a> from user_basetime.o(.text) referenced from startup_cx32l003.o(RESET)
 <LI><a href="#[17]">TIMER11_IRQHandler</a> from startup_cx32l003.o(.text) referenced from startup_cx32l003.o(RESET)
 <LI><a href="#[f]">UART0_IRQHandler</a> from startup_cx32l003.o(.text) referenced from startup_cx32l003.o(RESET)
 <LI><a href="#[10]">UART1_IRQHandler</a> from startup_cx32l003.o(.text) referenced from startup_cx32l003.o(RESET)
 <LI><a href="#[20]">VC_IRQHandler</a> from startup_cx32l003.o(.text) referenced from startup_cx32l003.o(RESET)
 <LI><a href="#[1c]">WWDT_IRQHandler</a> from startup_cx32l003.o(.text) referenced from startup_cx32l003.o(RESET)
 <LI><a href="#[26]">__main</a> from __main.o(!!!main) referenced from startup_cx32l003.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[26]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[27]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[29]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[117]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[118]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2a]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[119]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[2e]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[11a]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[11b]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[11c]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[11d]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[11e]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[11f]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[120]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[121]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[122]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[123]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[124]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[125]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[126]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[127]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[128]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[129]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[12a]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[12b]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[12c]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[12d]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[12e]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[33]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[12f]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[130]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[131]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[132]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[133]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[134]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[135]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[28]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[136]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[2b]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2d]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[137]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[2f]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; fucnPer5ms &rArr; fucnPer1s &rArr; getSignalChlADC &rArr; ADC_SignalMode_Config &rArr; ADCPinAFSet &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[138]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[115]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[32]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[139]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[34]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_cx32l003.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cx32l003.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cx32l003.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cx32l003.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>CLKTRIM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cx32l003.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cx32l003.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cx32l003.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cx32l003.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>I2C_DUMMY_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cx32l003.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cx32l003.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>IWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cx32l003.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cx32l003.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>LPUART_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cx32l003.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cx32l003.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cx32l003.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cx32l003.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>ONEWIRE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cx32l003.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cx32l003.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>PCA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cx32l003.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cx32l003.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>PWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cx32l003.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cx32l003.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SPI0COMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cx32l003.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cx32l003.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SPI_DUMMYCOMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cx32l003.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cx32l003.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIMER11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cx32l003.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cx32l003.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cx32l003.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cx32l003.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cx32l003.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cx32l003.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>VC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cx32l003.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cx32l003.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cx32l003.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cx32l003.o(RESET)
</UL>
<P><STRONG><a name="[113]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_cx32l003.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[36]"></a>ADC_DeInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cx32l003_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PeriphResetCmd
</UL>

<P><STRONG><a name="[f0]"></a>ADC_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cx32l003_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_MutiMode_Config
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SignalMode_Config
</UL>

<P><STRONG><a name="[13a]"></a>ADC_StructInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cx32l003_adc.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>ADC_CommonInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cx32l003_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_CommonInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_MutiMode_Config
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SignalMode_Config
</UL>

<P><STRONG><a name="[13b]"></a>ADC_CommonStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cx32l003_adc.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>ADC_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cx32l003_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_MutiMode_Config
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SignalMode_Config
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutiChannesADC
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSignalChlADC
</UL>

<P><STRONG><a name="[13c]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, cx32l003_adc.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>ADC_SoftwareStartConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cx32l003_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutiChannesADC
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSignalChlADC
</UL>

<P><STRONG><a name="[fa]"></a>ADC_GetSoftwareStartConvStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cx32l003_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSignalChlADC
</UL>

<P><STRONG><a name="[13d]"></a>ADC_ContinuousModeCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cx32l003_adc.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>ADC_ContinuousConverChannelCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cx32l003_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_MutiMode_Config
</UL>

<P><STRONG><a name="[f6]"></a>ADC_ContinuousConverRstCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cx32l003_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_MutiMode_Config
</UL>

<P><STRONG><a name="[13e]"></a>ADC_DisContinuousModeCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cx32l003_adc.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>ADC_GetConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cx32l003_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSignalChlADC
</UL>

<P><STRONG><a name="[13f]"></a>ADC_GetChannelConversionValue</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, cx32l003_adc.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>ADC_SetCompareHtValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cx32l003_adc.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>ADC_SetCompareLtValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cx32l003_adc.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>ADC_CompareControl</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cx32l003_adc.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>ADC_ExternalTrigInjectedConvConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cx32l003_adc.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>ADC_ITCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cx32l003_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SignalMode_Config
</UL>

<P><STRONG><a name="[144]"></a>ADC_AccCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cx32l003_adc.o(.text), UNUSED)

<P><STRONG><a name="[145]"></a>ADC_AccResultClear</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cx32l003_adc.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>ADC_GetAccResult</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cx32l003_adc.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>ADC_GetRISFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cx32l003_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutiChannesADC
</UL>

<P><STRONG><a name="[147]"></a>ADC_GetMISFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cx32l003_adc.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>ADC_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cx32l003_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_MutiMode_Config
</UL>

<P><STRONG><a name="[148]"></a>ADVTIM_DeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>ADVTIM_TimeBaseInit</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_ETR_FUNCTION_Config
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_DEADTIME_BREAK_DEEPSLEEP_Config
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_DEADTIME_BREAK
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_ONEPLUS_Config
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_OUTPUTCOMPARE_Config
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_CASACADEMODE_Config
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_SINGLECAPTUREMODE_Config
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_CAPTUREMODE_Config
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_PWMMODE_Config
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_MULTICHANEEL_Config
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TIM_Mode_Config
</UL>

<P><STRONG><a name="[6a]"></a>ADVTIM_OC1Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, cx32l003_advtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADVTIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_DEADTIME_BREAK_DEEPSLEEP_Config
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_DEADTIME_BREAK
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_ONEPLUS_Config
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_OUTPUTCOMPARE_Config
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_CASACADEMODE_Config
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_PWMMODE_Config
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_MULTICHANEEL_Config
</UL>

<P><STRONG><a name="[6c]"></a>ADVTIM_OC2Init</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, cx32l003_advtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADVTIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_DEADTIME_BREAK_DEEPSLEEP_Config
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_DEADTIME_BREAK
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_OUTPUTCOMPARE_Config
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_CASACADEMODE_Config
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_PWMMODE_Config
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_MULTICHANEEL_Config
</UL>

<P><STRONG><a name="[6e]"></a>ADVTIM_OC3Init</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, cx32l003_advtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADVTIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_DEADTIME_BREAK_DEEPSLEEP_Config
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_DEADTIME_BREAK
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_OUTPUTCOMPARE_Config
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_CASACADEMODE_Config
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_PWMMODE_Config
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_MULTICHANEEL_Config
</UL>

<P><STRONG><a name="[70]"></a>ADVTIM_OC4Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, cx32l003_advtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADVTIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_DEADTIME_BREAK_DEEPSLEEP_Config
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_DEADTIME_BREAK
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_OUTPUTCOMPARE_Config
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_CASACADEMODE_Config
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_PWMMODE_Config
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_MULTICHANEEL_Config
</UL>

<P><STRONG><a name="[40]"></a>ADVTIM_SetIC4Prescaler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_ICInit
</UL>

<P><STRONG><a name="[3e]"></a>ADVTIM_SetIC3Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_ICInit
</UL>

<P><STRONG><a name="[3c]"></a>ADVTIM_SetIC2Prescaler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_PWMIConfig
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_ICInit
</UL>

<P><STRONG><a name="[3a]"></a>ADVTIM_SetIC1Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_PWMIConfig
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_ICInit
</UL>

<P><STRONG><a name="[38]"></a>ADVTIM_ICInit</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, cx32l003_advtim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_SetIC1Prescaler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_SetIC2Prescaler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_SetIC3Prescaler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_SetIC4Prescaler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_ONEPLUS_Config
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_SINGLECAPTUREMODE_Config
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_CAPTUREMODE_Config
</UL>

<P><STRONG><a name="[41]"></a>ADVTIM_PWMIConfig</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, cx32l003_advtim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_SetIC1Prescaler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_SetIC2Prescaler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[93]"></a>ADVTIM_BDTRConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_DEADTIME_BREAK_DEEPSLEEP_Config
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_DEADTIME_BREAK
</UL>

<P><STRONG><a name="[149]"></a>ADVTIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>ADVTIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>ADVTIM_ICStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_ONEPLUS_Config
</UL>

<P><STRONG><a name="[14b]"></a>ADVTIM_BDTRStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>ADVTIM_Cmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_IRQHandler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_ETR_FUNCTION_Config
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_DEADTIME_BREAK_DEEPSLEEP_Config
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_DEADTIME_BREAK
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_OUTPUTCOMPARE_Config
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_CASACADEMODE_Config
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_SINGLECAPTUREMODE_Config
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_CAPTUREMODE_Config
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_PWMMODE_Config
</UL>

<P><STRONG><a name="[74]"></a>ADVTIM_CtrlPWMOutputs</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_DEADTIME_BREAK_DEEPSLEEP_Config
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_DEADTIME_BREAK
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_ONEPLUS_Config
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_PWMMODE_Config
</UL>

<P><STRONG><a name="[66]"></a>ADVTIM_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cx32l003_advtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADVTIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_IRQHandler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_ETR_FUNCTION_Config
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_SINGLECAPTUREMODE_Config
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_CAPTUREMODE_Config
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_MULTICHANEEL_Config
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TIM_Mode_Config
</UL>

<P><STRONG><a name="[99]"></a>ADVTIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_EVENT_GENERATION_Config
</UL>

<P><STRONG><a name="[14c]"></a>ADVTIM_DMAConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>ADVTIM_DMACmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>ADVTIM_InternalClockConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>ADVTIM_SelectInputTrigger</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_TIxExternalClockConfig
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_ITRxExternalClockConfig
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_ONEPLUS_Config
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_CASACADEMODE_Config
</UL>

<P><STRONG><a name="[42]"></a>ADVTIM_ITRxExternalClockConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, cx32l003_advtim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[44]"></a>ADVTIM_TIxExternalClockConfig</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, cx32l003_advtim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_SelectInputTrigger
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[46]"></a>ADVTIM_ETRConfig</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, cx32l003_advtim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_ETRClockMode2Config
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[45]"></a>ADVTIM_ETRClockMode1Config</STRONG> (Thumb, 50 bytes, Stack size 36 bytes, cx32l003_advtim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_ETRConfig
</UL>

<P><STRONG><a name="[47]"></a>ADVTIM_ETRClockMode2Config</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, cx32l003_advtim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_ETRConfig
</UL>

<P><STRONG><a name="[69]"></a>ADVTIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_MULTICHANEEL_Config
</UL>

<P><STRONG><a name="[14f]"></a>ADVTIM_CounterModeConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>ADVTIM_EncoderInterfaceConfig</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>ADVTIM_ForcedOC1Config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>ADVTIM_ForcedOC2Config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>ADVTIM_ForcedOC3Config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>ADVTIM_ForcedOC4Config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>ADVTIM_ARRPreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_OUTPUTCOMPARE_Config
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TIM_Mode_Config
</UL>

<P><STRONG><a name="[155]"></a>ADVTIM_SelectCOM</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>ADVTIM_SelectCCDMA</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>ADVTIM_CCPreloadControl</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>ADVTIM_OC1PreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_OUTPUTCOMPARE_Config
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_MULTICHANEEL_Config
</UL>

<P><STRONG><a name="[6d]"></a>ADVTIM_OC2PreloadConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_OUTPUTCOMPARE_Config
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_MULTICHANEEL_Config
</UL>

<P><STRONG><a name="[6f]"></a>ADVTIM_OC3PreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_OUTPUTCOMPARE_Config
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_MULTICHANEEL_Config
</UL>

<P><STRONG><a name="[71]"></a>ADVTIM_OC4PreloadConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_OUTPUTCOMPARE_Config
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_MULTICHANEEL_Config
</UL>

<P><STRONG><a name="[158]"></a>ADVTIM_OC1FastConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>ADVTIM_OC2FastConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>ADVTIM_OC3FastConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>ADVTIM_OC4FastConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>ADVTIM_ClearOC1Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>ADVTIM_ClearOC2Ref</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>ADVTIM_ClearOC3Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>ADVTIM_ClearOC4Ref</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>ADVTIM_OC1PolarityConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>ADVTIM_OC1NPolarityConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>ADVTIM_OC2PolarityConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>ADVTIM_OC2NPolarityConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>ADVTIM_OC3PolarityConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>ADVTIM_OC3NPolarityConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>ADVTIM_OC4PolarityConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>ADVTIM_CCxCmd</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>ADVTIM_CCxNCmd</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>ADVTIM_SelectOCxM</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>ADVTIM_UpdateDisableConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>ADVTIM_UpdateRequestConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>ADVTIM_SelectHallSensor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>ADVTIM_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_ONEPLUS_Config
</UL>

<P><STRONG><a name="[8c]"></a>ADVTIM_SelectOutputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_CASACADEMODE_Config
</UL>

<P><STRONG><a name="[8d]"></a>ADVTIM_SelectSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_ONEPLUS_Config
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_CASACADEMODE_Config
</UL>

<P><STRONG><a name="[8b]"></a>ADVTIM_SelectMasterSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_CASACADEMODE_Config
</UL>

<P><STRONG><a name="[16d]"></a>ADVTIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>ADVTIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>ADVTIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>ADVTIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>ADVTIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>ADVTIM_SetCompare4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>ADVTIM_SetClockDivision</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>ADVTIM_GetCapture1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_IRQHandler
</UL>

<P><STRONG><a name="[9e]"></a>ADVTIM_GetCapture2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_IRQHandler
</UL>

<P><STRONG><a name="[9f]"></a>ADVTIM_GetCapture3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_IRQHandler
</UL>

<P><STRONG><a name="[a0]"></a>ADVTIM_GetCapture4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_IRQHandler
</UL>

<P><STRONG><a name="[174]"></a>ADVTIM_GetCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>ADVTIM_GetPrescaler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>ADVTIM_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>ADVTIM_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TIM_Mode_Config
</UL>

<P><STRONG><a name="[9b]"></a>ADVTIM_GetITStatus</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, cx32l003_advtim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADVTIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_IRQHandler
</UL>

<P><STRONG><a name="[9c]"></a>ADVTIM_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cx32l003_advtim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_IRQHandler
</UL>

<P><STRONG><a name="[fd]"></a>AWK_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cx32l003_awk.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AWK_Config
</UL>

<P><STRONG><a name="[ff]"></a>AWK_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cx32l003_awk.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AWK_Config
</UL>

<P><STRONG><a name="[100]"></a>AWK_SelClk</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cx32l003_awk.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AWK_Config
</UL>

<P><STRONG><a name="[fe]"></a>AWK_SetRldval</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cx32l003_awk.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AWK_Feed
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AWK_Config
</UL>

<P><STRONG><a name="[102]"></a>AWK_ClearITFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cx32l003_awk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AWK_IRQHandler
</UL>

<P><STRONG><a name="[ad]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, cx32l003_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Key_Config
</UL>

<P><STRONG><a name="[48]"></a>GPIO_DeInit</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, cx32l003_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PeriphResetCmd
</UL>

<P><STRONG><a name="[177]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cx32l003_gpio.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>GPIO_Init</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, cx32l003_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIMER_Config
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
</UL>

<P><STRONG><a name="[178]"></a>GPIO_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cx32l003_gpio.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cx32l003_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcKeyTask
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
</UL>

<P><STRONG><a name="[179]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cx32l003_gpio.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>GPIO_DBSyncCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cx32l003_gpio.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>GPIO_DBPinSyncCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cx32l003_gpio.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>GPIO_DBClkCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cx32l003_gpio.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>GPIO_SetDBClk</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cx32l003_gpio.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cx32l003_gpio.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cx32l003_gpio.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cx32l003_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fucnPer5ms
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
</UL>

<P><STRONG><a name="[e4]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cx32l003_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fucnPer5ms
</UL>

<P><STRONG><a name="[180]"></a>GPIO_WriteBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cx32l003_gpio.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cx32l003_gpio.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>GPIO_ToggleBits</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cx32l003_gpio.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>GPIO_PinPuPdCmd</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, cx32l003_gpio.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>GPIO_PortDRCmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cx32l003_gpio.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, cx32l003_gpio.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, cx32l003_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCPinAFSet
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_RTC1MHZOUTPUT_Config
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_SETLPTIMERGATE
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_CAPTUREMODE_Config
</UL>

<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cx32l003_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cx32l003.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cx32l003_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cx32l003.o(RESET)
</UL>
<P><STRONG><a name="[186]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cx32l003_it.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cx32l003_it.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cx32l003_it.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cx32l003_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cx32l003.o(RESET)
</UL>
<P><STRONG><a name="[189]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cx32l003_it.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cx32l003_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cx32l003.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cx32l003_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cx32l003.o(RESET)
</UL>
<P><STRONG><a name="[18a]"></a>LPTIMER_ReadCnt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cx32l003_lptimer.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>LPTIMER_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, cx32l003_lptimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPTIMER_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIMER_Config
</UL>

<P><STRONG><a name="[b6]"></a>LPTIMER_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cx32l003_lptimer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIMER_Config
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Sleep
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_DeepSleep
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entryNormalModeChk
</UL>

<P><STRONG><a name="[18b]"></a>LPTIMER_TogCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cx32l003_lptimer.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>LPTIMER_ITConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cx32l003_lptimer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIMER_Config
</UL>

<P><STRONG><a name="[18c]"></a>LPTIMER_GetWTFlagStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cx32l003_lptimer.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>LPTIMER_BGloadConfig</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, cx32l003_lptimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LPTIMER_BGloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIMER_Config
</UL>

<P><STRONG><a name="[bd]"></a>LPTIMER_LoadConfig</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, cx32l003_lptimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LPTIMER_LoadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIMER_Config
</UL>

<P><STRONG><a name="[18d]"></a>LPTIMER_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cx32l003_lptimer.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>LPTIMER_ClearITFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cx32l003_lptimer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIMER_IRQHandler
</UL>

<P><STRONG><a name="[18e]"></a>RCC_DeInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cx32l003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>RCC_HIRCTrim</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cx32l003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>RCC_LIRCTrim</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cx32l003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>RCC_SetHXTDrive</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cx32l003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>RCC_SetLXTDrive</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cx32l003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>RCC_WaitForHIRCStable</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, cx32l003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>RCC_WaitForHXTStable</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, cx32l003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>RCC_WaitForLIRCStable</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, cx32l003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>RCC_WaitForLXTStable</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, cx32l003_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_RTC1MHZOUTPUT_Config
</UL>

<P><STRONG><a name="[c4]"></a>RCC_LXTCmd</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, cx32l003_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_RTC1MHZOUTPUT_Config
</UL>

<P><STRONG><a name="[196]"></a>RCC_SetX32KPort</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cx32l003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>RCC_SetM0IRQLatency</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cx32l003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>RCC_SystemTickTimerConfig</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cx32l003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>RCC_SetSystemTickTimerCoreRefClockcmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, cx32l003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>RCC_SysclkCmd</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, cx32l003_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_SysclkCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSystemHIRC
</UL>

<P><STRONG><a name="[19a]"></a>RCC_SelSysclk</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cx32l003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>RCC_SysclkOutputConfig</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cx32l003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[19c]"></a>RCC_SysclkOutputCmd</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cx32l003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[19d]"></a>RCC_SysclkFclkDiv</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cx32l003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>RCC_GetSysclkSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cx32l003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>RCC_SetHclkDiv</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cx32l003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>RCC_SetPclkDiv</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cx32l003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1a1]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cx32l003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>RCC_APBPeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cx32l003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>RCC_PeriphResetCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, cx32l003_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_DeInit
</UL>

<P><STRONG><a name="[1a3]"></a>RCC_RTCResetCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cx32l003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1a4]"></a>RCC_ResetCmd</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, cx32l003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cx32l003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1a6]"></a>RCC_SetIoMux</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cx32l003_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, cx32l003_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
</UL>

<P><STRONG><a name="[4a]"></a>RTC_EnterInitMode</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, cx32l003_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibConfig
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
</UL>

<P><STRONG><a name="[49]"></a>RTC_DeInit</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, cx32l003_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[4d]"></a>RTC_ExitInitMode</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cx32l003_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibConfig
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[4c]"></a>RTC_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, cx32l003_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[1a7]"></a>RTC_StructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cx32l003_rtc.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>RTC_WriteProtectionCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cx32l003_rtc.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>RTC_RtcClkCmd</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, cx32l003_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_RTC1MHZOUTPUT_Config
</UL>

<P><STRONG><a name="[c6]"></a>RTC_SelRtcClk</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, cx32l003_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_RTC1MHZOUTPUT_Config
</UL>

<P><STRONG><a name="[1a9]"></a>RTC_BypassShadowCmd</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cx32l003_rtc.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>RTC_SetTime</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, cx32l003_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[1aa]"></a>RTC_TimeStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cx32l003_rtc.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>RTC_GetTime</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, cx32l003_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>

<P><STRONG><a name="[52]"></a>RTC_SetDate</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, cx32l003_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[1ab]"></a>RTC_DateStructInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, cx32l003_rtc.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>RTC_GetDate</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, cx32l003_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>

<P><STRONG><a name="[54]"></a>RTC_SetAlarm1</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, cx32l003_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>

<P><STRONG><a name="[1ac]"></a>RTC_SetAlarm2</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cx32l003_rtc.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>RTC_AlarmStructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cx32l003_rtc.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>RTC_GetAlarm1</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, cx32l003_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>

<P><STRONG><a name="[1ae]"></a>RTC_GetAlarm2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cx32l003_rtc.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>RTC_AlarmCmd</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cx32l003_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_RTC1MHZOUTPUT_Config
</UL>

<P><STRONG><a name="[56]"></a>RTC_CoarseCalibConfig</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, cx32l003_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[cb]"></a>RTC_CalibOutputCmd</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cx32l003_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_RTC1MHZOUTPUT_Config
</UL>

<P><STRONG><a name="[c9]"></a>RTC_CountCmd</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, cx32l003_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_RTC1MHZOUTPUT_Config
</UL>

<P><STRONG><a name="[c8]"></a>RTC_SmoothCalibConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cx32l003_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_RTC1MHZOUTPUT_Config
</UL>

<P><STRONG><a name="[1af]"></a>RTC_AlprITConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, cx32l003_rtc.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>RTC_AlmITConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, cx32l003_rtc.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>RTC_GetFlagStatus</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, cx32l003_rtc.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>RTC_ClearFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cx32l003_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_MATCH0_IRQHandler
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[cf]"></a>RTC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cx32l003_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_MATCH0_IRQHandler
</UL>

<P><STRONG><a name="[57]"></a>SYSCTRL_DeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cx32l003_syscon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PeriphResetCmd
</UL>

<P><STRONG><a name="[1b2]"></a>SYSCTRL_CortexM0LockUpCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, cx32l003_syscon.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>SYSCTRL_DeepsleepPortITCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cx32l003_syscon.o(.text), UNUSED)

<P><STRONG><a name="[1b4]"></a>SYSCTRL_ActiveSleepPortITCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cx32l003_syscon.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>SYSCTRL_SPICSConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cx32l003_syscon.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>SYSCTRL_TIM10_GateConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cx32l003_syscon.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>SYSCTRL_TIM11_GateConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cx32l003_syscon.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>SYSCTRL_IPTIM_GateConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cx32l003_syscon.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_SETLPTIMERGATE
</UL>

<P><STRONG><a name="[1b8]"></a>SYSCTRL_PCACapMuxConfig</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, cx32l003_syscon.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>SYSCTRL_TIM1_InputSignalConfig</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, cx32l003_syscon.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>SYSCTRL_TIM1_ETRSignalConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cx32l003_syscon.o(.text), UNUSED)

<P><STRONG><a name="[1bb]"></a>SYSCTRL_TIM1_SetBreakSTM</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cx32l003_syscon.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>SYSCTRL_TIM1_SetBreakZERO</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cx32l003_syscon.o(.text), UNUSED)

<P><STRONG><a name="[1bd]"></a>SYSCTRL_TIM2_InputSignalConfig</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, cx32l003_syscon.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>SYSCTRL_TIM2_ETRSignalConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cx32l003_syscon.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>SYSCTRL_LPUART_CLKConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cx32l003_syscon.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>SYSCTRL_LPUART_CLKCmd</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, cx32l003_syscon.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>TIM_DeInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cx32l003_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PeriphResetCmd
</UL>

<P><STRONG><a name="[a3]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cx32l003_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASIC_TIM_Mode_Config
</UL>

<P><STRONG><a name="[1c1]"></a>TIM_StructInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, cx32l003_timer.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cx32l003_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASIC_TIM_Mode_Config
</UL>

<P><STRONG><a name="[1c2]"></a>TIM_TogCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cx32l003_timer.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>TIM_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cx32l003_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASIC_TIM_Mode_Config
</UL>

<P><STRONG><a name="[1c3]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cx32l003_timer.o(.text), UNUSED)

<P><STRONG><a name="[1c4]"></a>TIM_SelectGatePolarity</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cx32l003_timer.o(.text), UNUSED)

<P><STRONG><a name="[1c5]"></a>TIM_SetClockDivision</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cx32l003_timer.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>TIM_GetPrescaler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cx32l003_timer.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>TIM_SetTimerLoadRegister</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cx32l003_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASIC_TIM_Mode_Config
</UL>

<P><STRONG><a name="[1c7]"></a>TIM_GetTimerLoadRegister</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cx32l003_timer.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>TIM_SetCountRegister</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cx32l003_timer.o(.text), UNUSED)

<P><STRONG><a name="[1c9]"></a>TIM_GetCountRegister</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cx32l003_timer.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>TIM_GetITSourceFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cx32l003_timer.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>TIM_GetITShieldFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cx32l003_timer.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>TIM_ClearITFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cx32l003_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER10_IRQHandler
</UL>

<P><STRONG><a name="[5c]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_NVIC_Config
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_NVIC_Config
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOD_NVIC_Configuration
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC_NVIC_Configuration
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB_NVIC_Configuration
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA_NVIC_Configuration
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_NVIC_Config
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVANCE_TIM_NVIC_Config
</UL>

<P><STRONG><a name="[5d]"></a>NVIC_Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_NVIC_Config
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_NVIC_Config
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOD_NVIC_Configuration
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC_NVIC_Configuration
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB_NVIC_Configuration
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA_NVIC_Configuration
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_NVIC_Config
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVANCE_TIM_NVIC_Config
</UL>

<P><STRONG><a name="[1cc]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>TEST_TIM_Mode_Config</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, user_advtime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_ClearFlag
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_ARRPreloadConfig
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_ITConfig
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_TimeBaseInit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVANCE_TIM_NVIC_Config
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM2_ReleaseReset
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM2_Reset
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM1_ReleaseReset
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM1_Reset
</UL>

<P><STRONG><a name="[67]"></a>TEST_ADVTIM_MULTICHANEEL_Config</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, user_advtime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_OC4PreloadConfig
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_OC3PreloadConfig
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_OC2PreloadConfig
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_OC1PreloadConfig
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_PrescalerConfig
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_ITConfig
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_OC4Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_OC3Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_OC2Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_OC1Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_TimeBaseInit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[72]"></a>ADVTIM_PWMMODE_Config</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, user_advtime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ADVTIM_PWMMODE_Config &rArr; ADVTIM_OC4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_CtrlPWMOutputs
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_Cmd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_OC4Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_OC3Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_OC2Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_OC1Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>switchPwmChannel</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, user_advtime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onChargeChl
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offChargeChl
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onDischargeChl
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offDischargeChl
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onMotorChl
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offMotorChl
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onBuzzerChl
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offBuzzerChl
</UL>

<P><STRONG><a name="[75]"></a>offBuzzerChl</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, user_advtime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchPwmChannel
</UL>

<P><STRONG><a name="[77]"></a>onBuzzerChl</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, user_advtime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchPwmChannel
</UL>

<P><STRONG><a name="[78]"></a>offMotorChl</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, user_advtime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchPwmChannel
</UL>

<P><STRONG><a name="[79]"></a>onMotorChl</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, user_advtime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchPwmChannel
</UL>

<P><STRONG><a name="[7a]"></a>offDischargeChl</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, user_advtime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchPwmChannel
</UL>

<P><STRONG><a name="[7b]"></a>onDischargeChl</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, user_advtime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchPwmChannel
</UL>

<P><STRONG><a name="[7c]"></a>offChargeChl</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, user_advtime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchPwmChannel
</UL>

<P><STRONG><a name="[7d]"></a>onChargeChl</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, user_advtime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchPwmChannel
</UL>

<P><STRONG><a name="[7e]"></a>updatePWMChlDuty</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, user_advtime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = updatePWMChlDuty &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePwmFreq
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateChargeDuty
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDischargeDuty
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateMotorDuty
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBuzzerDuty
</UL>

<P><STRONG><a name="[82]"></a>updateBuzzerDuty</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, user_advtime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = updateBuzzerDuty &rArr; updatePWMChlDuty &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePWMChlDuty
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunction
</UL>

<P><STRONG><a name="[83]"></a>updateMotorDuty</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, user_advtime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePWMChlDuty
</UL>

<P><STRONG><a name="[84]"></a>updateDischargeDuty</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, user_advtime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePWMChlDuty
</UL>

<P><STRONG><a name="[85]"></a>updateChargeDuty</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, user_advtime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePWMChlDuty
</UL>

<P><STRONG><a name="[86]"></a>updatePwmFreq</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, user_advtime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = updatePwmFreq &rArr; updatePWMChlDuty &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePWMChlDuty
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunction
</UL>

<P><STRONG><a name="[87]"></a>TEST_ADVTIM_CAPTUREMODE_Config</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, user_advtime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_ITConfig
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_Cmd
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_ICInit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_TimeBaseInit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVANCE_TIM_NVIC_Config
</UL>

<P><STRONG><a name="[89]"></a>TEST_ADVTIM_SINGLECAPTUREMODE_Config</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, user_advtime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_ITConfig
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_Cmd
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_ICInit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_TimeBaseInit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVANCE_TIM_NVIC_Config
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM1_ReleaseReset
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM1_Reset
</UL>

<P><STRONG><a name="[8a]"></a>TEST_ADVTIM_CASACADEMODE_Config</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, user_advtime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_SelectMasterSlaveMode
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_SelectSlaveMode
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_SelectOutputTrigger
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_SelectInputTrigger
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_Cmd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_OC4Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_OC3Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_OC2Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_OC1Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_TimeBaseInit
</UL>

<P><STRONG><a name="[8e]"></a>TEST_ADVTIM_OUTPUTCOMPARE_Config</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, user_advtime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_OC4PreloadConfig
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_OC3PreloadConfig
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_OC2PreloadConfig
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_OC1PreloadConfig
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_ARRPreloadConfig
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_Cmd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_OC4Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_OC3Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_OC2Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_OC1Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_TimeBaseInit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[8f]"></a>TEST_ADVTIM_ONEPLUS_Config</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, user_advtime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_SelectSlaveMode
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_SelectOnePulseMode
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_SelectInputTrigger
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_CtrlPWMOutputs
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_ICStructInit
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_ICInit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_OC1Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_TimeBaseInit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM1_ReleaseReset
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM1_Reset
</UL>

<P><STRONG><a name="[92]"></a>TEST_ADVTIM_DEADTIME_BREAK</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, user_advtime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_CtrlPWMOutputs
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_Cmd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_BDTRConfig
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_OC4Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_OC3Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_OC2Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_OC1Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_TimeBaseInit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM1_ReleaseReset
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM1_Reset
</UL>

<P><STRONG><a name="[94]"></a>TEST_ADVTIM_DEADTIME_BREAK_DEEPSLEEP_Config</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, user_advtime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_CtrlPWMOutputs
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_Cmd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_BDTRConfig
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_OC4Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_OC3Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_OC2Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_OC1Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_TimeBaseInit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeepSleep
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReleaseReset
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Reset
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM1_ReleaseReset
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM1_Reset
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAYCELL
</UL>

<P><STRONG><a name="[98]"></a>TEST_ADVTIM_EVENT_GENERATION_Config</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, user_advtime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_GenerateEvent
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM1_ReleaseReset
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM1_Reset
</UL>

<P><STRONG><a name="[9a]"></a>TEST_ADVTIM_ETR_FUNCTION_Config</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, user_advtime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_ITConfig
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_Cmd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_TimeBaseInit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM1_ReleaseReset
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM1_Reset
</UL>

<P><STRONG><a name="[1a]"></a>ADVTIM_IRQHandler</STRONG> (Thumb, 494 bytes, Stack size 8 bytes, user_advtime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADVTIM_IRQHandler &rArr; ADVTIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_ClearITPendingBit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_GetITStatus
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_GetCapture4
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_GetCapture3
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_GetCapture2
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_GetCapture1
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_ITConfig
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_Cmd
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cx32l003.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>BASIC_TIM_Mode_Config</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, user_basetime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BASIC_TIM_Mode_Config &rArr; TIM_NVIC_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_NVIC_Config
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetTimerLoadRegister
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16]"></a>TIMER10_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, user_basetime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER10_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cx32l003.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>EXTI_Key_Config</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, user_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EXTI_Key_Config &rArr; GPIOA_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA_NVIC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b]"></a>GPIOA_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, user_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIOA_IRQHandler &rArr; GPIO_IRQHandler &rArr; entryNormalModeChk
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cx32l003.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>GPIOB_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, user_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIOB_IRQHandler &rArr; GPIO_IRQHandler &rArr; entryNormalModeChk
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cx32l003.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>GPIOC_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, user_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIOC_IRQHandler &rArr; GPIO_IRQHandler &rArr; entryNormalModeChk
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cx32l003.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>GPIOD_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, user_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIOD_IRQHandler &rArr; GPIO_IRQHandler &rArr; entryNormalModeChk
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cx32l003.o(RESET)
</UL>
<P><STRONG><a name="[1cf]"></a>readInternalFlashData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, user_internalflash.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>readInternalFlashWrod</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, user_internalflash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSystemLIRC
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSystemHIRC
</UL>

<P><STRONG><a name="[1d0]"></a>readInternalFlashByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, user_internalflash.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>LED_GPIO_Config</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, user_led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LED_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>Enter_DeepSleep</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, user_lptimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIMER_Cmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AWK_Config
</UL>

<P><STRONG><a name="[b7]"></a>Enter_Sleep</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, user_lptimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIMER_Cmd
</UL>

<P><STRONG><a name="[b9]"></a>TEST_SETLPTIMERGATE</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, user_lptimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_IPTIM_GateConfig
</UL>

<P><STRONG><a name="[bb]"></a>LPTIMER_Config</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, user_lptimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LPTIMER_Config &rArr; NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIMER_LoadConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIMER_BGloadConfig
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIMER_ITConfig
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIMER_Cmd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIMER_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18]"></a>LPTIMER_IRQHandler</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, user_lptimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPTIMER_IRQHandler &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIMER_ClearITFlag
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cx32l003.o(RESET)
</UL>
<P><STRONG><a name="[c2]"></a>RTC_NVIC_Config</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, user_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>

<P><STRONG><a name="[c3]"></a>TEST_RTC1MHZOUTPUT_Config</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, user_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LXTCmd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForLXTStable
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SmoothCalibConfig
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CountCmd
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CalibOutputCmd
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AlarmCmd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SelRtcClk
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_RtcClkCmd
</UL>

<P><STRONG><a name="[cd]"></a>RTC_SetALM2PR</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, user_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[cc]"></a>RTC_Configuration</STRONG> (Thumb, 126 bytes, Stack size 64 bytes, user_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetALM2PR
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearFlag
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_RtcClkCmd
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
</UL>

<P><STRONG><a name="[23]"></a>RTC_MATCH0_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, user_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_MATCH0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetITStatus
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cx32l003.o(RESET)
</UL>
<P><STRONG><a name="[d0]"></a>setSystemHIRC</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, user_sysclock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = setSystemHIRC &rArr; RCC_SysclkCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInternalFlashWrod
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SysclkCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemClkSet
</UL>

<P><STRONG><a name="[d4]"></a>setSystemLIRC</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, user_sysclock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setSystemLIRC
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInternalFlashWrod
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemClkSet
</UL>

<P><STRONG><a name="[d6]"></a>systemClkSelect</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, user_sysclock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemClkSet
</UL>

<P><STRONG><a name="[d5]"></a>systemClkSet</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, user_sysclock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = systemClkSet &rArr; setSystemHIRC &rArr; RCC_SysclkCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemClkSelect
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSystemLIRC
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSystemHIRC
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30]"></a>main</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = main &rArr; fucnPer5ms &rArr; fucnPer1s &rArr; getSignalChlADC &rArr; ADC_SignalMode_Config &rArr; ADCPinAFSet &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetEntrySleepTime
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readADCResultFromMutiChls
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOnIoInit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutiChannesADC
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSignalChlADC
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcKeyTask
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fucnPer5ms
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunction
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemClkSet
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIMER_Config
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Key_Config
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASIC_TIM_Mode_Config
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_PWMMODE_Config
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[e0]"></a>funcKeyTask</STRONG> (Thumb, 364 bytes, Stack size 8 bytes, user_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = funcKeyTask
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e5]"></a>keyDoubleClickChk</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, user_key.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fucnPer5ms
</UL>

<P><STRONG><a name="[d7]"></a>powerOnIoInit</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, user_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = powerOnIoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df]"></a>resetEntrySleepTime</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, user_menu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entryNormalModeChk
</UL>

<P><STRONG><a name="[af]"></a>entryNormalModeChk</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, user_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = entryNormalModeChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIMER_Cmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetEntrySleepTime
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AWK_IRQHandler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
</UL>

<P><STRONG><a name="[1d1]"></a>stopChargingChk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, user_menu.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>fucnPer50ms</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, user_menu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fucnPer5ms
</UL>

<P><STRONG><a name="[e7]"></a>fucnPer100ms</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, user_menu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fucnPer5ms
</UL>

<P><STRONG><a name="[e8]"></a>fucnPer500ms</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, user_menu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fucnPer5ms
</UL>

<P><STRONG><a name="[e3]"></a>fucnPer1s</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, user_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = fucnPer1s &rArr; getSignalChlADC &rArr; ADC_SignalMode_Config &rArr; ADCPinAFSet &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSignalChlADC
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fucnPer5ms
</UL>

<P><STRONG><a name="[e2]"></a>fucnPer5ms</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, user_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = fucnPer5ms &rArr; fucnPer1s &rArr; getSignalChlADC &rArr; ADC_SignalMode_Config &rArr; ADCPinAFSet &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fucnPer1s
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fucnPer500ms
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fucnPer100ms
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fucnPer50ms
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyDoubleClickChk
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e1]"></a>MenuFunction</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, user_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MenuFunction &rArr; updatePwmFreq &rArr; updatePWMChlDuty &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePwmFreq
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateBuzzerDuty
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ec]"></a>ADCPinAFSet</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, user_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADCPinAFSet &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_MutiMode_Config
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SignalMode_Config
</UL>

<P><STRONG><a name="[ee]"></a>adcChlCMD2adcIndex</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, user_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcChlCMD2adcAdcChl
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readADCResultFromMutiChls
</UL>

<P><STRONG><a name="[ed]"></a>adcChlCMD2adcAdcChl</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, user_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adcChlCMD2adcAdcChl
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcChlCMD2adcIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SignalMode_Config
</UL>

<P><STRONG><a name="[ef]"></a>ADC_SignalMode_Config</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, user_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ADC_SignalMode_Config &rArr; ADCPinAFSet &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ITCmd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcChlCMD2adcAdcChl
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCPinAFSet
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSignalChlADC
</UL>

<P><STRONG><a name="[f4]"></a>ADC_MutiMode_Config</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, user_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ADC_MutiMode_Config &rArr; ADCPinAFSet &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearFlag
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ContinuousConverRstCmd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ContinuousConverChannelCmd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCPinAFSet
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutiChannesADC
</UL>

<P><STRONG><a name="[d8]"></a>mutiChannesADC</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, user_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = mutiChannesADC &rArr; ADC_MutiMode_Config &rArr; ADCPinAFSet &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetRISFlagStatus
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_MutiMode_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[de]"></a>getSignalChlADC</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, user_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = getSignalChlADC &rArr; ADC_SignalMode_Config &rArr; ADCPinAFSet &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetSoftwareStartConvStatus
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SignalMode_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fucnPer1s
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>readADCResultFromMutiChls</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, user_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = readADCResultFromMutiChls
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcChlCMD2adcIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>AWK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, user_awk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AWK_SetRldval
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AWK_SelClk
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AWK_Cmd
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AWK_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_NVIC_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_DeepSleep
</UL>

<P><STRONG><a name="[101]"></a>AWK_Feed</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, user_awk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AWK_SetRldval
</UL>

<P><STRONG><a name="[21]"></a>AWK_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, user_awk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AWK_IRQHandler &rArr; entryNormalModeChk
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AWK_ClearITFlag
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entryNormalModeChk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cx32l003.o(RESET)
</UL>
<P><STRONG><a name="[1d2]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSignalChlADC
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_IRQHandler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_OUTPUTCOMPARE_Config
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_MULTICHANEEL_Config
</UL>

<P><STRONG><a name="[1d3]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIMER_IRQHandler
</UL>

<P><STRONG><a name="[1d4]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1d5]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1d6]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fucnPer1s
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunction
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d7]"></a>_d2f</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, d2f.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunction
</UL>

<P><STRONG><a name="[103]"></a>_dadd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[1d8]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[1d9]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>_drsb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[dc]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fucnPer1s
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[109]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[108]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[10b]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>

<P><STRONG><a name="[1da]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fucnPer1s
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1db]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fucnPer1s
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1dc]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunction
</UL>

<P><STRONG><a name="[1dd]"></a>_f2d</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePWMChlDuty
</UL>

<P><STRONG><a name="[1de]"></a>_ffixu</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ffixui.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[10c]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>

<P><STRONG><a name="[1df]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePWMChlDuty
</UL>

<P><STRONG><a name="[1e0]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>__fpl_fcmp_InfNaN</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, fcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[10f]"></a>__fpl_cmpreturn</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cmpret.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[110]"></a>__fpl_fcheck_NaN2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[2c]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[31]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[111]"></a>__fpl_return_NaN</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, retnan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
</UL>

<P><STRONG><a name="[1e1]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1e2]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[1e3]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, user_sysclock.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSystemHIRC
</UL>

<P><STRONG><a name="[1e5]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePWMChlDuty
</UL>

<P><STRONG><a name="[1e6]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[eb]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, frlef.o(x$fpl$frleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFunction
</UL>

<P><STRONG><a name="[116]"></a>_frcmple</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, frlef.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[3f]"></a>TI4_Config</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, cx32l003_advtim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_ICInit
</UL>

<P><STRONG><a name="[3d]"></a>TI3_Config</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, cx32l003_advtim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_ICInit
</UL>

<P><STRONG><a name="[3b]"></a>TI2_Config</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, cx32l003_advtim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_TIxExternalClockConfig
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_PWMIConfig
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_ICInit
</UL>

<P><STRONG><a name="[39]"></a>TI1_Config</STRONG> (Thumb, 142 bytes, Stack size 20 bytes, cx32l003_advtim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_TIxExternalClockConfig
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_PWMIConfig
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVTIM_ICInit
</UL>

<P><STRONG><a name="[4f]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cx32l003_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm1
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
</UL>

<P><STRONG><a name="[51]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cx32l003_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetAlarm1
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
</UL>

<P><STRONG><a name="[97]"></a>DELAYCELL</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, user_advtime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_DEADTIME_BREAK_DEEPSLEEP_Config
</UL>

<P><STRONG><a name="[5f]"></a>ADVTIM1_Reset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, user_advtime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_ETR_FUNCTION_Config
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_EVENT_GENERATION_Config
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_DEADTIME_BREAK_DEEPSLEEP_Config
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_DEADTIME_BREAK
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_ONEPLUS_Config
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_SINGLECAPTUREMODE_Config
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TIM_Mode_Config
</UL>

<P><STRONG><a name="[60]"></a>ADVTIM1_ReleaseReset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, user_advtime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_ETR_FUNCTION_Config
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_EVENT_GENERATION_Config
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_DEADTIME_BREAK_DEEPSLEEP_Config
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_DEADTIME_BREAK
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_ONEPLUS_Config
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_SINGLECAPTUREMODE_Config
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TIM_Mode_Config
</UL>

<P><STRONG><a name="[95]"></a>GPIO_Reset</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, user_advtime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_DEADTIME_BREAK_DEEPSLEEP_Config
</UL>

<P><STRONG><a name="[96]"></a>GPIO_ReleaseReset</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, user_advtime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_DEADTIME_BREAK_DEEPSLEEP_Config
</UL>

<P><STRONG><a name="[61]"></a>ADVTIM2_Reset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, user_advtime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TIM_Mode_Config
</UL>

<P><STRONG><a name="[62]"></a>ADVTIM2_ReleaseReset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, user_advtime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TIM_Mode_Config
</UL>

<P><STRONG><a name="[59]"></a>DeepSleep</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, user_advtime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_DEADTIME_BREAK_DEEPSLEEP_Config
</UL>

<P><STRONG><a name="[5b]"></a>ADVANCE_TIM_NVIC_Config</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, user_advtime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_SINGLECAPTUREMODE_Config
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_CAPTUREMODE_Config
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_TIM_Mode_Config
</UL>

<P><STRONG><a name="[5a]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, user_advtime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_ETR_FUNCTION_Config
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_ADVTIM_EVENT_GENERATION_Config
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeepSleep
</UL>

<P><STRONG><a name="[a1]"></a>TIM_NVIC_Config</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, user_basetime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_NVIC_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASIC_TIM_Mode_Config
</UL>

<P><STRONG><a name="[a8]"></a>GPIOA_NVIC_Configuration</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, user_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIOA_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Key_Config
</UL>

<P><STRONG><a name="[a9]"></a>GPIOB_NVIC_Configuration</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, user_exti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>

<P><STRONG><a name="[aa]"></a>GPIOC_NVIC_Configuration</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, user_exti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>

<P><STRONG><a name="[ab]"></a>GPIOD_NVIC_Configuration</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, user_exti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>

<P><STRONG><a name="[ae]"></a>GPIO_IRQHandler</STRONG> (Thumb, 304 bytes, Stack size 8 bytes, user_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_IRQHandler &rArr; entryNormalModeChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entryNormalModeChk
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOD_IRQHandler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC_IRQHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB_IRQHandler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA_IRQHandler
</UL>

<P><STRONG><a name="[b8]"></a>NVIC_Configuration</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, user_lptimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIMER_Config
</UL>

<P><STRONG><a name="[fc]"></a>IWDG_NVIC_Config</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, user_awk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AWK_Config
</UL>

<P><STRONG><a name="[105]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[104]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[114]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
